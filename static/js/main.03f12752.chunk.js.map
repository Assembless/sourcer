{"version":3,"sources":["posts/index.ts","api/authors.ts","api/Post.ts","pages/Home.tsx","pages/Post.tsx","pages/Wrong.tsx","utils/colorMethods.ts","utils/theme.ts","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["id","title","author_id","created_at","languages","topics","name","Post","author","meta","posts","find","p","Error","this","Author","Date","authors","a","getParsedPosts","filter","map","post","Home","volume","ref","useRef","current","length","usePosts","useStyles","createUseStyles","theme","root","color","palette","primary","main","useParams","classes","className","Wrong","padZero","str","len","Array","join","slice","lightenColor","percent","num","parseInt","replace","amt","Math","round","R","B","G","toString","ThemeColor","baseColor","hex","indexOf","r","g","b","invertColor","substr","result","exec","hexToRgb","DynamicTheme","background","App","useState","locale","setLocale","language","setLanguage","exact","path","component","HomePage","PostPage","WrongPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.03f12752.chunk.js","sourcesContent":["export interface IPostData {\n    id: string;\n    title: string;\n    author_id: string;\n    created_at: string;\n    languages: string[];\n    topics: string[];\n}\n\nexport default\n    [\n        {\n            id: \"hello-world\",\n            title: \"Hello World\",\n            author_id: \"000-420\",\n            created_at: \"Thu Jun 04 2020 21:54:13 GMT+0200 (Central European Summer Time)\",\n            languages: [ \"en_US\", \"pl_PL\" ],\n            topics: [ \"offtopic\" ]\n        }\n    ] as IPostData[];","import { IAuthor } from \"./Post\";\n\nexport default\n    [\n        {\n            name: \"Mike\",\n            id: \"000-420\"\n        },\n        {\n            name: \"Damian\",\n            id: \"100-000\"\n        }\n    ] as IAuthor[]","import posts from \"../posts\";\nimport authors from \"./authors\";\nimport { useRef } from \"react\";\n\nexport interface IPost {\n    id: string;\n    title: string;\n    author: IAuthor;\n    created_at: Date;\n    languages: string[];\n    topics: string[];\n}\n\nexport class Post implements IPost {\n    id: string;\n    title: string;\n    author: IAuthor;\n    created_at: Date;\n    languages: string[];\n    topics: string[];\n\n    constructor(id: string) {\n        const meta = posts.find(p => p.id === id);\n\n        if(!meta) throw new Error(`Post with id ${id} could not be found.`);\n\n        this.id = id;\n        this.title = meta.title;\n        this.author = new Author(meta.author_id);\n        this.created_at = new Date(meta.created_at);\n        this.languages = meta.languages;\n        this.topics = meta.topics;\n    }\n}\n\nexport interface IAuthor {\n    name: string;\n    id: string;\n    posts: IPost[];\n}\n\nexport class Author implements IAuthor {\n    name: string;\n    id: string;\n\n    constructor(author_id: string) {\n        const author = authors.find(a => a.id === author_id);\n\n        if(!author) throw new Error(`Author with id ${author_id} cound not be found.`)\n\n        this.name = author.name;\n        this.id = author_id;\n    }\n\n    get posts() {\n        return getParsedPosts().filter(p => p.author.id === this.id);\n    }\n}\n\nexport const getParsedPosts = () => posts.map(post => new Post(post.id));\n\nexport const usePosts = (volume?: number) => {\n    const ref = useRef(getParsedPosts());\n\n    if(typeof volume === \"number\") ref.current.length = volume;\n    \n    return ref.current as IPost[];\n}","import React from \"react\";\nimport { usePosts } from \"../api/Post\";\n\nconst Home = () => {\n    const posts = usePosts();\n\n    return <div>\n        <h2>Home</h2>\n\n        {\n            // refactor to another component before extending..\n            posts.map(post => \n                    <h4>{post.title} - {post.author.name}</h4>)\n        }\n    </div>\n}\n\nexport default Home;","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { createUseStyles } from \"react-jss\";\nimport { ITheme } from \"../types\";\n\nconst useStyles = createUseStyles((theme: ITheme) => ({\n    root: {\n        color: theme.palette.primary.main\n    }\n}));\n\nconst Post = () => {\n    const { id } = useParams();\n    const classes = useStyles();\n\n    return <div className={classes.root}>Post - {id}</div>\n}\n\nexport default Post;","import React from \"react\";\n\nconst Wrong = () => {\n\n    return <div>Wrong</div>\n}\n\nexport default Wrong;","export function invertColor(hex: string) {\n    if (hex.indexOf('#') === 0) {\n        hex = hex.slice(1);\n    }\n    // convert 3-digit hex to 6-digits.\n    if (hex.length === 3) {\n        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n    }\n    if (hex.length !== 6) {\n        throw new Error('Invalid HEX color.');\n    }\n    // invert color components\n    var r = (255 - parseInt(hex.slice(0, 2), 16)).toString(16),\n        g = (255 - parseInt(hex.slice(2, 4), 16)).toString(16),\n        b = (255 - parseInt(hex.slice(4, 6), 16)).toString(16);\n    // pad each with zeros and return\n    return '#' + padZero(r) + padZero(g) + padZero(b);\n}\n\nfunction padZero(str: string, len?: number) {\n    len = len || 2;\n    var zeros = new Array(len).join('0');\n    return (zeros + str).slice(-len);\n}\n\nexport function getContrastYIQ(hex: string){\n\tvar r = parseInt(hex.substr(0,2),16);\n\tvar g = parseInt(hex.substr(2,2),16);\n\tvar b = parseInt(hex.substr(4,2),16);\n\tvar yiq = ((r*299)+(g*587)+(b*114))/1000;\n\treturn (yiq >= 128) ? 'black' : 'white';\n}\n\nexport var lightenColor = function(color: string, percent: number) {\n    var num = parseInt(color.replace(\"#\",\"\"),16),\n      amt = Math.round(2.55 * percent),\n      R = (num >> 16) + amt,\n      // eslint-disable-next-line no-mixed-operators\n      B = (num >> 8 & 0x00FF) + amt,\n      G = (num & 0x0000FF) + amt;\n\n      return (0x1000000 + (R<255?R<1?0:R:255)*0x10000 + (B<255?B<1?0:B:255)*0x100 + (G<255?G<1?0:G:255)).toString(16).slice(1);\n};\n\nexport function hexToRgb(hex: string) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }","import { ITheme, TThemeColor } from \"../types\";\nimport { getContrastYIQ, invertColor, lightenColor, hexToRgb } from \"./colorMethods\";\n\nclass DynamicTheme implements ITheme {\n\n    palette = {\n        primary: new ThemeColor(\"#9C6\"),\n        background: new ThemeColor(\"#FFF\")\n    }\n}\n\n\n\nclass ThemeColor implements TThemeColor {\n    public main: string;\n\n    constructor(baseColor: string) {\n        this.main = baseColor;   \n    }\n\n    get darker() {\n        return lightenColor(this.main as unknown as string, 15);\n    }\n\n    get lighter() {\n        return lightenColor(this.main as unknown as string, 10);\n    }\n\n    get inverted() {\n        return invertColor(this.main as unknown as string);\n    }\n\n    get text() {\n        return getContrastYIQ(this.main as unknown as string);\n    }\n    \n    get rgb() {\n        return hexToRgb(this.main);\n    }\n}\n\nexport default DynamicTheme;","import React, { useState } from 'react';\nimport LitteraProvider from \"react-littera\";\nimport { ThemeProvider } from \"react-jss\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { Home as HomePage, Post as PostPage, Wrong as WrongPage } from \"../pages\";\nimport DynamicTheme from \"../utils/theme\";\n\nfunction App() {\n  const [locale, setLocale] = useState(\"en_US\");\n\n  return (\n    <div className=\"App\">\n      <ThemeProvider theme={new DynamicTheme()}>\n        <LitteraProvider language={locale} setLanguage={setLocale}>\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={HomePage} />\n              <Route path=\"/p/:id\" component={PostPage} />\n              <Route component={WrongPage} />\n            </Switch>\n          </Router>\n        </LitteraProvider>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}